// tests for github
// Generated by serverless-mocha-plugin
const mod = require('../src/handlers/github')
const mochaPlugin = require('serverless-mocha-plugin')
const nock = require('nock')

const lambdaWrapper = mochaPlugin.lambdaWrapper
const expect = mochaPlugin.chai.expect
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handle' })

const CheckReviews = require('../src/handlers/github/CheckReviews').default

const headers = require('./payloads/headers')
const payloads = require('./payloads/github')
const slackUrl = require('../src/consts/slack').SLACK_URL

describe('github', () => {
	describe('pull_request_review', () => {
		beforeEach(() => {
			nock.cleanAll()
		})
		it('Skips Review Process and returns CI success if PR is into master', (done) => {
			const payload = payloads.pullRequest.pullRequestOpenedMaster
			const sha = payload.pull_request.head.sha
			const successCI = nock('https://api.github.com')
				.post(`/repos/baxterthehacker/public-repo/statuses/${sha}`,
					{
						state: 'success',
						description: 'No reviews required',
						context: 'ci/reelio',
					})
				.reply(200)

			CheckReviews(payload, 'pull_request', 1)
				setTimeout(() => {
					expect(CheckReviews(payload, 'pull_request', 1)).to.equal('Master Branch')
					expect(successCI.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 10)
			})
		it('Returns CI failure if fewer than 2 reviews', (done) => {
			const payload = payloads.pullRequest.pullRequestOpenedStaging
			const sha = payload.pull_request.head.sha

			const failureCI = nock('https://api.github.com')
				.post(`/repos/baxterthehacker/public-repo/statuses/${sha}`,
					{
						state: 'failure',
						context: 'ci/reelio',
					})
				.reply(200)

			const add = nock('https://api.github.com')
				.post('/repos/baxterthehacker/public-repo/issues/8/labels', ['$$review'])
				.reply(200)
			const removeQA = nock('https://api.github.com')
				.delete('/repos/baxterthehacker/public-repo/issues/8/labels/%24%24qa')
				.reply(200)
			const removeApproved = nock('https://api.github.com')
				.delete('/repos/baxterthehacker/public-repo/issues/8/labels/approved')
				.reply(200)

			CheckReviews(payload, 'pull_request', 2)
				setTimeout(() => {
					expect(failureCI.isDone()).to.be.true
					expect(add.isDone()).to.be.true
					expect(removeQA.isDone()).to.be.true
					expect(removeApproved.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 10)
			})

	})
})
