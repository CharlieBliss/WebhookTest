// tests for github
// Generated by serverless-mocha-plugin
const mochaPlugin = require('serverless-mocha-plugin')
const mod = require('../../../src/handlers/github')
const nock = require('nock')

const lambdaWrapper = mochaPlugin.lambdaWrapper
const expect = mochaPlugin.chai.expect
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handle' })

const headers = require('../../payloads/headers')
const payloads = require('../../payloads/github')
const nocks = require('../../nocks')
const CheckReviews = require('../../../src/handlers/github/CheckReviews').default

export function PullRequestReview() {
	describe('Check PR Review Status', () => {
		beforeEach(() => {
			nock.cleanAll()
			nock.disableNetConnect()
		})

		it('Only triggers review process for specific actions (i.e. not "Closed")', (done) => {
			let payload = payloads.pullRequest.pullRequestBadAction
				setTimeout(() => {
					expect(CheckReviews(payload, 'pull_request')).to.equal('Invalid Action')
					done()
				}, 20)
			})

		it('Skips Review Process and returns CI success if PR is into master by devops', (done) => {
			const payload = payloads.pullRequest.pullRequestOpenedMasterDevops
			const sha = payload.pull_request.head.sha

			const successCI = nocks.status.masterSuccessCI(sha)

			CheckReviews(payload, 'pull_request')
				setTimeout(() => {
					expect(CheckReviews(payload, 'pull_request')).to.equal('Webhook PR')
					expect(successCI.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 20)
			})

		it('Returns CI failure if fewer than 2 reviews', (done) => {
			const payload = payloads.pullRequest.pullRequestOpenedStaging
			const sha = payload.pull_request.head.sha

			const failureCI = nocks.status.failureWaitingOnReview(sha)
			const reviews = nocks.reviews.singleApproved()
			const addReview = nocks.labels.addReview()
			const removeQA = nocks.labels.removeQA()
			const removeApproved = nocks.labels.removeApproved()

			CheckReviews(payload, 'pull_request')
				setTimeout(() => {
					expect(failureCI.isDone()).to.be.true
					expect(addReview.isDone()).to.be.true
					expect(removeQA.isDone()).to.be.true
					expect(removeApproved.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 20)
			})

		it('Returns CI failure if not all reviews are approved', (done) => {
			const payload = payloads.pullRequest.pullRequestOpenedStaging
			const sha = payload.pull_request.head.sha

			const failureCI = nocks.status.failureChangedRequested(sha)
			const reviews = nocks.reviews.outstandingChanges()
			const addReview = nocks.labels.addReview()
			const removeQA = nocks.labels.removeQA()
			const removeApproved = nocks.labels.removeApproved()

			CheckReviews(payload, 'pull_request')
				setTimeout(() => {
					expect(failureCI.isDone()).to.be.true
					expect(addReview.isDone()).to.be.true
					expect(removeQA.isDone()).to.be.true
					expect(removeApproved.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 50)
			})

		it('Returns CI success if 2 reviews, all approved', (done) => {
			const payload = payloads.pullRequest.pullRequestOpenedStaging
			const sha = payload.pull_request.head.sha

			const successCI = nocks.status.successCI(sha)
			const reviews = nocks.reviews.doubleApproved()
			const transition = nocks.jira.autoTransition()
			const ticketTable = nocks.jira.createTable()
			const addQAandApproved = nocks.labels.addQAandApproved()
			const removeReview = nocks.labels.removeReview()
			const removeChangesRequested = nocks.labels.removeChangesRequested()

			CheckReviews(payload, 'pull_request')
				setTimeout(() => {
					expect(successCI.isDone()).to.be.true
					expect(reviews.isDone()).to.be.true
					expect(transition.isDone()).to.be.true
					expect(ticketTable.isDone()).to.be.true
					expect(addQAandApproved.isDone()).to.be.true
					expect(removeReview.isDone()).to.be.true
					expect(removeChangesRequested.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 30)
			})

		it('Returns CI success if 2+ reviews, all approved', (done) => {
			const payload = payloads.pullRequest.pullRequestOpenedStaging
			const sha = payload.pull_request.head.sha

			const successCI = nocks.status.successCI(sha)
			const reviews = nocks.reviews.tripleApproved()
			const transition = nocks.jira.autoTransition()
			const ticketTable = nocks.jira.createTable()
			const addQAandApproved = nocks.labels.addQAandApproved()
			const removeChanges = nocks.labels.removeChangesRequested()
			const removeReview = nocks.labels.removeReview()

			CheckReviews(payload, 'pull_request')
				setTimeout(() => {
					expect(successCI.isDone()).to.be.true
					expect(reviews.isDone()).to.be.true
					expect(transition.isDone()).to.be.true
					expect(ticketTable.isDone()).to.be.true
					expect(addQAandApproved.isDone()).to.be.true
					expect(removeReview.isDone()).to.be.true
					expect(removeChanges.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 30)
			})

		it('Handles 1 approved review', (done) => {
			const payload = JSON.parse(payloads.review.approved)
			const sha = payload.pull_request.head.sha

			const addReview = nocks.labels.addReview()
			const removeQA = nocks.labels.removeQA()
			const removeApproved = nocks.labels.removeApproved()
			const failureCI = nocks.status.failureWaitingOnReview(sha)
			const reviews = nocks.reviews.singleApproved()
			const firebaseLog = nocks.firebase.genericFirebaseLog()

			const request = Object.assign({}, { headers: headers.github }, { body: payloads.review.approved })
			request.headers['X-Github-Event'] = payloads.review.event
			wrapped.run(request).then((response) => {
				setTimeout(() => {
					expect(response).to.not.be.empty
					expect(response.body).to.equal('Github -- Review Changes Success')
					expect(addReview.isDone()).to.be.true
					expect(removeQA.isDone()).to.be.true
					expect(removeApproved.isDone()).to.be.true
					expect(firebaseLog.isDone()).to.be.true
					expect(failureCI.isDone()).to.be.true
					expect(reviews.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 30)
			})
		})

		it('Handles 2nd approved review', (done) => {
			const payload = JSON.parse(payloads.review.approved)
			const sha = payload.pull_request.head.sha

			const reviews = nocks.reviews.doubleApproved()
			const addQAandApproved = nocks.labels.addQAandApproved()
			const removeChangesRequested = nocks.labels.removeChangesRequested()
			const firebaseLog = nocks.firebase.genericFirebaseLog()
			const removeReview = nocks.labels.removeReview()
			const successCI = nocks.status.successCI(sha)

			const request = Object.assign({}, { headers: headers.github }, { body: payloads.review.approved })
			request.headers['X-Github-Event'] = payloads.review.event
			wrapped.run(request).then((response) => {
				setTimeout(() => {
					expect(response).to.not.be.empty
					expect(response.body).to.equal('Github -- Review Changes Success')
					expect(addQAandApproved.isDone()).to.be.true
					expect(removeChangesRequested.isDone()).to.be.true
					expect(firebaseLog.isDone()).to.be.true
					expect(removeReview.isDone()).to.be.true
					expect(successCI.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 30)
			})
		})

		it('handles declined reviews', (done) => {
			const payload = JSON.parse(payloads.review.denied)
			const sha = payload.pull_request.head.sha

			const reviews = nocks.reviews.singleChangesRequested()
			const firebaseLog = nocks.firebase.genericFirebaseLog()
			const addChangesRequested = nocks.labels.addChangesRequested()
			const addReview = nocks.labels.addReview()
			const removeQA = nocks.labels.removeQA()
			const removeApproved = nocks.labels.removeApproved()
			const failureCI = nocks.status.failureWaitingOnTwoReviews(sha)
			const slack = nocks.slack.genericSlack()

			const request = Object.assign({}, { headers: headers.github }, { body: payloads.review.denied })
			request.headers['X-Github-Event'] = payloads.review.event
			wrapped.run(request).then((response) => {
				setTimeout(() => {
					expect(response).to.not.be.empty
					expect(response.body).to.equal('Github -- Review Changes Request')
					expect(reviews.isDone()).to.be.true
					expect(firebaseLog.isDone()).to.be.true
					expect(addChangesRequested.isDone()).to.be.true
					expect(addReview.isDone()).to.be.true
					expect(removeQA.isDone()).to.be.true
					expect(removeApproved.isDone()).to.be.true
					expect(slack.isDone()).to.be.true
					expect(failureCI.isDone()).to.be.true
					expect(nock.pendingMocks()).to.be.empty
					done()
				}, 50)
			})
		})

	})
}
